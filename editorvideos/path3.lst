12	#include "common.inc"
100	
100`201*	#pragma omp declare target
201`300*	#pragma acc routine
12`200*	
12`300*	double mylog2(double value)
12`300*	{
12`300*	    constexpr int mantissa_bits = 52, exponent_bias = 1022;
12`300*	    const double  half         = 0.5;
12`300*	    std::uint64_t half_bits    = reinterpret_cast<const std::uint64_t&>(half);
12`300*	    int e,lt;
12`300*	    uint64_t m;
12`300*	    double x, dbl_e, z, y, u, t;
12`300*	    m = reinterpret_cast<const std::uint64_t&>(value);
12`300*	    e = m >> mantissa_bits; // frexp(). e = exponent, m = mantissa
12`300*	    m &= std::uint64_t((1ull << mantissa_bits)-1);
12`300*	    m |= half_bits;
12`300*	    x = reinterpret_cast<const double&>(m);
12`300*	    lt = (x < 1/std::sqrt(2.)) ? -1 : 0;
12`300*	    dbl_e = e + lt - exponent_bias;
12`300*	    z = x - (half + (lt ? 0. : half));
12`300*	    y = half * (x - (lt ? half : 0.)) + half;
12`300*	    x = z/y;
12`300*	    z = x*x;
12`300*	    u = z   + -3.56722798512324312549E1;
12`300*	    t =       -7.89580278884799154124E-1;
12`300*	    u = u*z +  3.12093766372244180303E2;
12`300*	    t = t*z +  1.63866645699558079767E1;
12`300*	    u = u*z + -7.69691943550460008604E2;
12`300*	    t = t*z + -6.41409952958715622951E1;
12`300*	    y = z* (t/u) + (half+half);
12`300*	    return x*(y*std::log2(std::exp(1.))) + dbl_e;
12`300*	}
11`300*	
210`300*	#pragma acc routine
11	template<bool WithMoment>
11`470*	double Iterate(double zr, double zi)
470`475`1000*	void __global__ Iterate(double zr, double zi`1:, double xscale, double yscale, double* results`01:)
1000	void __global__ Iterate(double zr, double zi, double xscale, double yscale, std::uint16_t* results)
11	{
11	    const double escape_radius_squared = ESCAPE_RADIUS_SQUARED;
11	    const int maxiter = MAXITER;
485	
485	    unsigned slotno = blockIdx.x * blockDim.x + threadIdx.x;
485	    unsigned x = slotno % Xres, y = slotno / Xres;
485	    if(y >= Yres) return;
480	
11`490	    `0:double cr = zr, sr = cr;`1:double cr = zr += xscale*int(x-Xres/2), sr = cr;
11`490	    `0:double ci = zi, si = ci;`1:double ci = zi += yscale*int(y-Yres/2), si = ci;
11	    double dist;
11	    int iter = maxiter, notescaped = -1;
11	
11	    if(zr*(1+zr*(8*zr*zr+(16*zi*zi-3)))+zi*zi*(8*zi*zi-3) < 3./32 || ((zr+1)*(zr+1)+zi*zi)<1./16) { iter=0; }
11	
11	    while(notescaped)
11	    {
11	        double r2 = cr * cr;
11	        double i2 = ci * ci;
11	        dist = r2 + i2;
11	
11	        notescaped &= ((iter != 0) & (dist < escape_radius_squared)) ? -1 : 0;
11	        iter += notescaped;
11	
11	        double ri = cr * ci;
11	        ci = zi + (ri * 2);
11	        cr = zr + (r2 - i2);
11	
11	        if(WithMoment)
11	        {
11	            bool notmoment = iter & (iter-1);
11	            iter = (cr == sr && ci == si) ? 0 : iter;
11	            sr = notmoment ? sr : cr;
11	            si = notmoment ? si : ci;
11	        }
11	    }
11`310*	    return iter ? mylog2( maxiter-iter + 1 - mylog2(mylog2(dist) / 2)) * (4/std::log2(std::exp(1.))) : 0;
310`495*	    return iter ? std::log2( maxiter-iter + 1 - std::log2(std::log2(dist) / 2)) * (4/std::log2(std::exp(1.))) : 0;
495`1010*	    results[slotno] = iter ? std::log2( maxiter-iter + 1 - std::log2(std::log2(dist) / 2)) * (4/std::log2(std::exp(1.))) : 0;
1010	    results[slotno] = iter ? int(std::log2( maxiter-iter + 1 - std::log2(std::log2(dist) / 2)) * (8*4/std::log2(std::exp(1.)))) : 0;
11	}
110`215*	#pragma omp end declare target
450	
450	constexpr unsigned npixels = Xres * Yres, nthreads = 128, nblocks = (npixels + nthreads - 1) / nthreads;
1100	constexpr unsigned num_streams = 2;
10	
10	int main()
10	{
125`430*	    static double results[Xres*Yres];
430`1020*	    static double results[Xres*Yres], *p = NULL;
1020`1110*	    static std::uint16_t results[Xres*Yres], *p = NULL;
1110	    static std::uint16_t results[num_streams][npixels], *pointers[num_streams]{};
1111	    cudaStream_t streams[num_streams];
1111	
1111	    unsigned stream_number = 0, streams_busy = 0;
1111	    bool     stream_busy[num_streams];
1111	
1111	    for(unsigned n=0; n<num_streams; ++n)
1111	    {
435`1115*	    checkCudaErrors(cudaMalloc((void**)&p, sizeof(results))); assert(p != NULL);
1115	        checkCudaErrors(cudaMalloc((void**)&pointers[n], sizeof(results[0])));
1116	        checkCudaErrors(cudaStreamCreate(&streams[n]));
1116	        stream_busy[n] = false;
1111	    }
120	
10	    bool NeedMoment = true;
10	
10	    MAINLOOP_START(1);
10	    while(MAINLOOP_GET_CONDITION())
10	    {
10	        std::vector<unsigned> pixels (Xres * Yres);
10	
10	        double zr, zi, xscale, yscale; MAINLOOP_SET_COORDINATES();
10	
10	        unsigned n_inside = 0;
10	
170vv	        if(NeedMoment)
10`160*	        for(unsigned y=0; y<Yres; ++y)
10`350*	        {
10`175*	            if(NeedMoment)
185`220*	            #pragma omp target teams distribute parallel for collapse(2) map(to:zr,zi,xscale,yscale) map(from:results[0:Xres*Yres])
220`350*	            #pragma acc parallel loop gang worker vector copyin(zr,zi,xscale,yscale) copyout(results[0:Xres*Yres])
150^^^`350*	            for(unsigned y=0; y<Yres; ++y)
10`350*	                for(unsigned x=0; x<Xres; ++x)
10`146*	                {
10`130*	                    double v = Iterate<true>( zr+xscale*int(x-Xres/2), zi+yscale*int(y-Yres/2) );
130`375*	                    results[y*Xres+x] = Iterate<true>( zr+xscale*int(x-Xres/2), zi+yscale*int(y-Yres/2) );
375`400	            `0:Iterate<true>(...);`1:Iterate<true><<<nblocks, nthreads, 0>>>( zr, zi, xscale, yscale, p);
10`132*	                    n_inside += v == 0.;
10`132*	                    pixels[y*Xres + x] = Color(x,y, v);
10`144*	                }
180`355*	        }
10`180`	        `0:    `01:else
180`360*	        {
187^^^^^^^`230*	            #pragma omp target teams distribute parallel for collapse(2) map(to:zr,zi,xscale,yscale) map(from:results[0:Xres*Yres])
235^^^^^^^`360*	            #pragma acc parallel loop gang worker vector copyin(zr,zi,xscale,yscale) copyout(results[0:Xres*Yres])
155^^^^`360*	            for(unsigned y=0; y<Yres; ++y)
10`360*	                for(unsigned x=0; x<Xres; ++x)
10`142*	                {
10`138*	                    double v = Iterate<false>( zr+xscale*int(x-Xres/2), zi+yscale*int(y-Yres/2) );
138`370*	                    results[y*Xres+x] = Iterate<false>( zr+xscale*int(x-Xres/2), zi+yscale*int(y-Yres/2) );
370`410	            `0:Iterate<false>(...);`1:Iterate<false><<<nblocks, nthreads, 0>>>( zr, zi, xscale, yscale, p);
10`135*	                    n_inside += v == 0.;
10`135*	                    pixels[y*Xres + x] = Color(x,y, v);
10`140*	                }
10`365*	        }
420	
420	        checkCudaErrors(cudaMemcpy(results, p, sizeof(results), cudaMemcpyDeviceToHost));
190	
190`1030*	        unsigned n_inside = std::count_if(results, results+Xres*Yres, std::bind1st(std::equal_to<double>(), 0.));
1030	        unsigned n_inside = std::count_if(results, results+Xres*Yres, std::bind1st(std::equal_to<std::uint16_t>(), 0));
10	
10	        NeedMoment = n_inside >= (Xres*Yres)/1024;
197	
198`199`240*	        #pragma omp parallel for /* This part is run natively */
195`299	        for(unsigned y=0; y<Yres; ++y)
195^	            for(unsigned x=0; x<Xres; ++x)
196`1040*	                pixels[y*Xres + x] = Color(x,y, results[y*Xres+x]);
1040	                pixels[y*Xres + x] = Color(x,y, results[y*Xres+x]/8.);
10	
10	        MAINLOOP_PUT_RESULT(pixels);
10	    }
10	    MAINLOOP_FINISH();
10	}
10	